/* simple reset using universal selector */
* {
    /* by default, browsers apply margin or padding in the elements  */
    margin: 0;
    padding: 0;
    /*  content-box: only the content is included in total width and total height. padding, margin and border aren't included
        border-box: content, padding and border are included in total height and total width, but margin isn't included */
    box-sizing: border-box;
}

body{
    /* properties related to font are usually inherited for all the child elements of the body  */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header{
    /* vh: viewport height */
    height: 95vh;
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8),rgba(85, 197, 122, 0.8)), url(../img/hero.jpg);
    /* cover: resize the background image to cover the entire container */
    background-size: cover;
    background-position: top;
    /* clip-path creates a clipping region that sets whats parts of an element should be shown */
    clip-path: polygon( 0 0, 100% 0, 100% 75vh, 0 100%);    
    position: relative;
}

.logo-box{
    position: absolute;
    /* the place (reference) from which we start to count 40 pixels to the left and 40 pixels from the top is the parent element 
    which has its position set to relative*/
    top: 40px;
    left: 40px;
}

.logo{
    height: 35px;
}

.text-box{
    position: absolute;
    top: 40%;
    left: 50%;    
    /* these 50% are no longer in relation to the parent element but of the element itself,
    so -50% means it will be shifted half of the element width to the left side*/
    transform: translate(-50%, -50%);
    /* this is an inline block element and so it's treated as if it was text */
    text-align: center;
}

.heading-primary{
    color: #fff;
    text-transform: uppercase;
    /* fix this little shaking in the animation: backface-visibility property determines if the back part of the element when we transform it is visible or hidden for the user */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main{
    /* display both as block level elements, because block elements occupy the entire width that they have available
    and they create line breaks after and before them*/
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    animation-name: moveInLeft;
    animation-duration: 1s;    
    /* specifies how a CSS animation should progress over the duration of each cycle */
    animation-timing-function: ease-out;

    /* animation-delay: 3s; 
       animation will happen three times 
       animation-iteration-count: 3;    
    */
}

.heading-primary-sub{
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /* animation-name: moveInRight;
    animation-duration: 1s;
    animation-timing-function: ease-out; */
    animation: moveInRight 1s ease-out;
}

/*  Types of animations in CSS: first one is to use the transition property and then change the properties that you want to animate on an event like when we hover the element  
    Second one: start by creating an animation that looks exactly like we want it to be, using @keyframes, and than apply it in an element using the properties animation-name 
    and animation-duration
*/
@keyframes moveInLeft{
    /* I can specify what I want to happen in each moment of time of the animation */
    0% {
        /* opacity and transform are the properties that browsers are optimized for */
        opacity: 0;
        transform: translateX(-100px);
    }
    80% {        
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight{
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(-10px);
    }
    100%{
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom{
  0% {
      opacity: 0;
      transform: translateY(30px);
  }
  100%{
      opacity: 1;
      transform: translate(0);
  }
}

/* pseudo-classes are special state of a selector */
.btn:link,
/* this is the state when de user has already clicked on the button once before and then sees the button again */
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;    
    display: inline-block;
    border-radius: 100px;
    transition: all .2s;
    position: relative;
}

.btn:hover{
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

.btn:active{
    transform: translateY(1px);
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn-white{
    background-color: #fff;
    color: #777;
}

/* after pseudo element adds like a virtual element right after the element that we're selecting  */
.btn::after{
    content: "";
    display: inline-block;
    height: 100%;
    width:100%;
    border-radius: 100px;    
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn-white::after{
    background-color: #fff;
}

.btn:hover::after {
    transform: scale(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards;
}